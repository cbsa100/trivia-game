{"version":3,"sources":["components/CatSelect/CatSelect.js","components/QuestionScreen/QuestionScreen.js","components/FinalScreen/FinalScreen.js","App.js","reportWebVitals.js","index.js"],"names":["CatSelect","categories","onCatSelect","className","map","e","i","onClick","id","title","QuestionScreen","question","value","answers","onAnswerClick","step","useState","shuffledAnswers","setShuffledAnswers","useEffect","sort","Math","random","a","b","isCorrect","Array","from","document","getElementsByClassName","forEach","element","console","log","dataset","correct","style","backgroundColor","answer","FinalScreen","score","reset","App","lives","setLives","setScore","setStep","phase","setPhase","setQuestion","setValue","setAnswers","setCategories","usedQuestions","setUsedQuestions","notAllwedCat","setNotAllowedCat","highScore","setHighScore","getCats","setTimeout","randomCat","floor","nextStep","s","l","catIdArray","length","catId","includes","push","catsPromise","Promise","all","axios","get","promiseValues","catIdNameArray","data","getQuestion","category","res","questionsIdArray","cluesCount","clues_count","questionId","clues","answerList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9b7f92a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CatSelect.css';\r\n\r\nconst CatSelect = ({ categories, onCatSelect }) => {\r\n  return (\r\n    <div>\r\n      <h3>choose a category</h3>\r\n      <div className='options'>\r\n        {categories &&\r\n          categories.map((e, i) => (\r\n            <div\r\n              className='button'\r\n              key={i}\r\n              onClick={() => {\r\n                onCatSelect(e.id);\r\n              }}\r\n            >\r\n              {e.title}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatSelect;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst QuestionScreen = ({ question, value, answers, onAnswerClick, step }) => {\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n\r\n  // randomize answers order on answers state change\r\n  useEffect(() => {\r\n    setShuffledAnswers(\r\n      answers\r\n        .map((value) => ({ value, sort: Math.random() }))\r\n        .sort((a, b) => a.sort - b.sort)\r\n        .map(({ value }) => value)\r\n    );\r\n  }, [answers]);\r\n\r\n  //color correct answer green and wrong answers red\r\n  const colorAnswers = () => {\r\n    Array.from(document.getElementsByClassName('button')).forEach((element) => {\r\n      console.log(element.dataset.correct);\r\n      if (element.dataset.correct === 'true') {\r\n        element.style.backgroundColor = 'green';\r\n      } else {\r\n        element.style.backgroundColor = 'red';\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {step > 0 && step % 3 === 0 && <h2>bunos round</h2>}\r\n      <h3>{question}</h3>\r\n      <div className='options'>\r\n        {shuffledAnswers.map((e, i) => (\r\n          <div\r\n            className='button'\r\n            key={i}\r\n            data-correct={e.isCorrect}\r\n            onClick={() => {\r\n              onAnswerClick(e.isCorrect, value);\r\n              colorAnswers();\r\n            }}\r\n          >\r\n            {e.answer}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionScreen;\r\n","import React from 'react';\r\n\r\nconst FinalScreen = ({ score, reset }) => {\r\n  return (\r\n    <div>\r\n      <h2>Final Screen</h2>\r\n      <p>your score is {score}</p>\r\n      <button onClick={reset}>click here to start over</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinalScreen;\r\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport CatSelect from './components/CatSelect/CatSelect';\nimport QuestionScreen from './components/QuestionScreen/QuestionScreen';\nimport FinalScreen from './components/FinalScreen/FinalScreen';\n\nconst App = () => {\n  const [lives, setLives] = useState(5);\n  const [score, setScore] = useState(0);\n  const [step, setStep] = useState(1);\n  const [phase, setPhase] = useState(0);\n  const [question, setQuestion] = useState('');\n  const [value, setValue] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [usedQuestions, setUsedQuestions] = useState([]);\n  const [notAllwedCat, setNotAllowedCat] = useState([]);\n  const [highScore, setHighScore] = useState(0);\n\n  // init categories\n  useEffect(() => {\n    getCats();\n  }, []);\n  //update highScore\n  useEffect(() => {\n    score > highScore && setHighScore(score);\n  }, [score]);\n  //move to finalScreen when 0 lives\n  useEffect(() => {\n    setTimeout(function () {\n      lives === 0 && setPhase(2);\n    }, 1000);\n  }, [lives]);\n\n  //random questions\n  useEffect(() => {\n    if (step > 0 && step % 3 === 0) {\n      const randomCat = Math.floor(Math.random() * 18000);\n      setNotAllowedCat((a) => [...a, randomCat]);\n      onCatSelect(randomCat);\n    }\n  }, [step]);\n\n  const decreaseLives = () => {\n    setLives((l) => l - 1);\n  };\n  const nextStep = () => {\n    setStep((s) => s + 1);\n  };\n\n  //reset all states but HighScore to start a new game\n  const reset = () => {\n    setLives(5);\n    setScore(0);\n    setStep(1);\n    setPhase(0);\n    setQuestion('');\n    setValue(0);\n    setAnswers([]);\n    setCategories([]);\n    setUsedQuestions([]);\n    setNotAllowedCat([]);\n    getCats();\n  };\n\n  //when choosing an answer option\n  const onAnswerClick = async (isCorrect, value) => {\n    if (isCorrect) {\n      setScore((s) => s + value);\n      setTimeout(function () {\n        nextStep();\n        setPhase(0);\n      }, 1000);\n    } else {\n      setTimeout(function () {\n        if (lives !== 1) {\n          nextStep();\n          setPhase(0);\n          setAnswers([]);\n          setQuestion('');\n          setValue(0);\n        }\n      }, 1000);\n      decreaseLives();\n    }\n  };\n\n  //get categories to first phase\n  const getCats = async () => {\n    let catIdArray = [];\n    while (catIdArray.length < 4) {\n      let catId = Math.floor(Math.random() * 18000);\n      !catIdArray.includes(catId) &&\n        !notAllwedCat.includes(catId) &&\n        catIdArray.push(catId);\n    }\n    const catsPromise = Promise.all([\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[0]}`),\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[1]}`),\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[2]}`),\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[3]}`),\n    ]);\n    const promiseValues = await catsPromise;\n    const catIdNameArray = promiseValues.map((e) => {\n      return { id: e.data.id, title: e.data.title };\n    });\n    setCategories(catIdNameArray);\n  };\n\n  //get questions after category\n  const getQuestion = async (category) => {\n    const res = await axios.get(\n      `https://jservice.io/api/category/?id=${category}`\n    );\n    let questionsIdArray = [];\n    const cluesCount = res.data.clues_count;\n    while (questionsIdArray.length < 4) {\n      let questionId = Math.floor(Math.random() * cluesCount);\n      !questionsIdArray.includes(questionId) &&\n        !usedQuestions.includes(questionId) &&\n        questionsIdArray.push(questionId);\n    }\n    setUsedQuestions((s) => [...s, res.data.clues[questionsIdArray[0]].id]);\n    setValue(res.data.clues[questionsIdArray[0]].value);\n    setQuestion(res.data.clues[questionsIdArray[0]].question);\n\n    const answerList = questionsIdArray.map((e, i) => {\n      const answer = res.data.clues[e].answer;\n\n      return {\n        answer: answer,\n        isCorrect: i === 0,\n      };\n    });\n    setAnswers(answerList);\n  };\n\n  const onCatSelect = async (catId) => {\n    await getQuestion(catId);\n    setPhase(1);\n    getCats();\n  };\n\n  return (\n    <div className='outerContainer'>\n      {phase === 0 && !(step % 3 === 0) && (\n        <CatSelect onCatSelect={onCatSelect} categories={categories} />\n      )}\n      {phase === 1 && (\n        <QuestionScreen\n          question={question}\n          value={value}\n          answers={answers}\n          onAnswerClick={onAnswerClick}\n          step={step}\n        />\n      )}\n      {phase === 2 && <FinalScreen score={score} reset={reset} />}\n      <div className='scores'>\n        {highScore > 0 && highScore > score && (\n          <div className='highScore'>HIGH SCORE: {highScore}</div>\n        )}\n        {score > 0 && (\n          <div className='currentScore'>CURRENT SCORE: {score}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}