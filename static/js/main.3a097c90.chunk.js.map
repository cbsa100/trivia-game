{"version":3,"sources":["components/CatSelect/CatSelect.js","components/QuestionScreen/QuestionScreen.js","components/FinalScreen/FinalScreen.js","App.js","reportWebVitals.js","index.js"],"names":["CatSelect","categories","onCatSelect","className","map","e","i","onClick","id","title","QuestionScreen","disableButtons","question","value","answers","onAnswerClick","step","useState","shuffledAnswers","setShuffledAnswers","useEffect","sort","Math","random","a","b","isCorrect","Array","from","document","getElementsByClassName","forEach","element","console","log","dataset","correct","style","backgroundColor","answer","FinalScreen","score","reset","App","lives","setLives","setScore","setStep","phase","setPhase","setQuestion","setValue","setAnswers","setCategories","usedQuestions","setUsedQuestions","notAllwedCat","setNotAllowedCat","highScore","setHighScore","setDisableButtons","getCats","setTimeout","randomCat","floor","nextStep","s","l","catIdArray","length","catId","includes","push","catsPromise","Promise","all","axios","get","promiseValues","catIdNameArray","data","getQuestion","category","res","questionsIdArray","cluesCount","clues_count","questionId","clues","answerList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a097c90.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CatSelect.css';\r\n\r\nconst CatSelect = ({ categories, onCatSelect }) => {\r\n  return (\r\n    <div>\r\n      <h3>choose a category</h3>\r\n      <div className='options'>\r\n        {categories &&\r\n          categories.map((e, i) => (\r\n            <div\r\n              className='button'\r\n              key={i}\r\n              onClick={() => {\r\n                onCatSelect(e.id);\r\n              }}\r\n            >\r\n              {e.title}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatSelect;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst QuestionScreen = ({\r\n  disableButtons,\r\n  question,\r\n  value,\r\n  answers,\r\n  onAnswerClick,\r\n  step,\r\n}) => {\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n\r\n  // randomize answers order on answers state change\r\n  useEffect(() => {\r\n    setShuffledAnswers(\r\n      answers\r\n        .map((value) => ({ value, sort: Math.random() }))\r\n        .sort((a, b) => a.sort - b.sort)\r\n        .map(({ value }) => value)\r\n    );\r\n  }, [answers]);\r\n\r\n  //color correct answer green and wrong answers red\r\n  const colorAnswers = () => {\r\n    Array.from(document.getElementsByClassName('button')).forEach((element) => {\r\n      console.log(element.dataset.correct);\r\n      if (element.dataset.correct === 'true') {\r\n        element.style.backgroundColor = 'green';\r\n      } else {\r\n        element.style.backgroundColor = 'red';\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {step > 0 && step % 3 === 0 && <h2>bunos round</h2>}\r\n      <h3>{question}</h3>\r\n      <div className='options'>\r\n        {shuffledAnswers.map((e, i) => (\r\n          <div\r\n            className='button'\r\n            key={i}\r\n            data-correct={e.isCorrect}\r\n            onClick={() => {\r\n              if (!disableButtons) {\r\n                onAnswerClick(e.isCorrect, value);\r\n                colorAnswers();\r\n              }\r\n            }}\r\n          >\r\n            {e.answer}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionScreen;\r\n","import React from 'react';\r\n\r\nconst FinalScreen = ({ score, reset }) => {\r\n  return (\r\n    <div>\r\n      <h2>Final Screen</h2>\r\n      <p>your score is {score}</p>\r\n      <button onClick={reset}>click here to start over</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinalScreen;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\nimport CatSelect from './components/CatSelect/CatSelect';\r\nimport QuestionScreen from './components/QuestionScreen/QuestionScreen';\r\nimport FinalScreen from './components/FinalScreen/FinalScreen';\r\n\r\nconst App = () => {\r\n  const [lives, setLives] = useState(5);\r\n  const [score, setScore] = useState(0);\r\n  const [step, setStep] = useState(1);\r\n  const [phase, setPhase] = useState(0);\r\n  const [question, setQuestion] = useState('');\r\n  const [value, setValue] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [usedQuestions, setUsedQuestions] = useState([]);\r\n  const [notAllwedCat, setNotAllowedCat] = useState([]);\r\n  const [highScore, setHighScore] = useState(0);\r\n  const [disableButtons, setDisableButtons] = useState(false);\r\n\r\n  // init categories\r\n  useEffect(() => {\r\n    getCats();\r\n  }, []);\r\n  //update highScore\r\n  useEffect(() => {\r\n    score > highScore && setHighScore(score);\r\n  }, [score]);\r\n  //move to finalScreen when 0 lives\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      lives <= 0 && setPhase(2);\r\n    }, 1000);\r\n  }, [lives]);\r\n\r\n  //random questions\r\n  useEffect(() => {\r\n    if (step > 0 && step % 3 === 0) {\r\n      const randomCat = Math.floor(Math.random() * 18000);\r\n      setNotAllowedCat((a) => [...a, randomCat]);\r\n      onCatSelect(randomCat);\r\n    }\r\n  }, [step]);\r\n\r\n  const decreaseLives = () => {\r\n    setLives((l) => l - 1);\r\n  };\r\n  const nextStep = () => {\r\n    setStep((s) => s + 1);\r\n  };\r\n\r\n  //reset all states but HighScore to start a new game\r\n  const reset = () => {\r\n    setLives(5);\r\n    setScore(0);\r\n    setStep(1);\r\n    setPhase(0);\r\n    setQuestion('');\r\n    setValue(0);\r\n    setAnswers([]);\r\n    setCategories([]);\r\n    setUsedQuestions([]);\r\n    setNotAllowedCat([]);\r\n    getCats();\r\n  };\r\n\r\n  //when choosing an answer option\r\n  const onAnswerClick = async (isCorrect, value) => {\r\n    setDisableButtons(true);\r\n    if (isCorrect) {\r\n      setScore((s) => s + value);\r\n      setTimeout(function () {\r\n        nextStep();\r\n        setPhase(0);\r\n      }, 1000);\r\n    } else {\r\n      setTimeout(function () {\r\n        if (lives !== 1) {\r\n          nextStep();\r\n          setPhase(0);\r\n          setAnswers([]);\r\n          setQuestion('');\r\n          setValue(0);\r\n          setDisableButtons(false);\r\n        }\r\n      }, 1000);\r\n      decreaseLives();\r\n    }\r\n  };\r\n\r\n  //get categories to first phase\r\n  const getCats = async () => {\r\n    let catIdArray = [];\r\n    while (catIdArray.length < 4) {\r\n      let catId = Math.floor(Math.random() * 18000);\r\n      !catIdArray.includes(catId) &&\r\n        !notAllwedCat.includes(catId) &&\r\n        catIdArray.push(catId);\r\n    }\r\n    const catsPromise = Promise.all([\r\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[0]}`),\r\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[1]}`),\r\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[2]}`),\r\n      axios.get(`https://jservice.io/api/category/?id=${catIdArray[3]}`),\r\n    ]);\r\n    const promiseValues = await catsPromise;\r\n    const catIdNameArray = promiseValues.map((e) => {\r\n      return { id: e.data.id, title: e.data.title };\r\n    });\r\n    setCategories(catIdNameArray);\r\n  };\r\n\r\n  //get questions after category\r\n  const getQuestion = async (category) => {\r\n    const res = await axios.get(\r\n      `https://jservice.io/api/category/?id=${category}`\r\n    );\r\n    let questionsIdArray = [];\r\n    const cluesCount = res.data.clues_count;\r\n    while (questionsIdArray.length < 4) {\r\n      let questionId = Math.floor(Math.random() * cluesCount);\r\n      !questionsIdArray.includes(questionId) &&\r\n        !usedQuestions.includes(questionId) &&\r\n        questionsIdArray.push(questionId);\r\n    }\r\n    setUsedQuestions((s) => [...s, res.data.clues[questionsIdArray[0]].id]);\r\n    setValue(res.data.clues[questionsIdArray[0]].value);\r\n    setQuestion(res.data.clues[questionsIdArray[0]].question);\r\n\r\n    const answerList = questionsIdArray.map((e, i) => {\r\n      const answer = res.data.clues[e].answer;\r\n\r\n      return {\r\n        answer: answer,\r\n        isCorrect: i === 0,\r\n      };\r\n    });\r\n    setAnswers(answerList);\r\n  };\r\n\r\n  const onCatSelect = async (catId) => {\r\n    await getQuestion(catId);\r\n    setPhase(1);\r\n    getCats();\r\n  };\r\n\r\n  return (\r\n    <div className='outerContainer'>\r\n      {phase === 0 && !(step % 3 === 0) && (\r\n        <CatSelect onCatSelect={onCatSelect} categories={categories} />\r\n      )}\r\n      {phase === 1 && (\r\n        <QuestionScreen\r\n          question={question}\r\n          value={value}\r\n          answers={answers}\r\n          onAnswerClick={onAnswerClick}\r\n          step={step}\r\n          disableButtons={disableButtons}\r\n        />\r\n      )}\r\n      {phase === 2 && <FinalScreen score={score} reset={reset} />}\r\n      <div className='scores'>\r\n        {highScore > 0 && highScore > score && (\r\n          <div className='highScore'>HIGH SCORE: {highScore}</div>\r\n        )}\r\n        {score > 0 && (\r\n          <div className='currentScore'>CURRENT SCORE: {score}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}